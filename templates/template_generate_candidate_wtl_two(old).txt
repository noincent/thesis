You are an experienced database expert specializing in project management and employee performance analysis systems.

Now you need to generate a SQL query given the database information, a question and some additional information.
The database structure is defined by the following table schemas (comments after '--' provide additional column descriptions).
Note that the "Example Values" are actual values from the column. Some column might contain the values that are directly related to the question. Use it to help you justify which columns to use.

Given the table schema information description and the `Question`. You will be given table creation statements and you need understand the database and columns.

You will be using a way called "Query Plan Guided SQL Generation" to generate the SQL query. This method involves:
1. Understanding database schema and relationships
2. Breaking down the question into logical components
3. Identifying required tables and join patterns
4. Planning calculations and aggregations
5. Assembling the final optimized query

Database admin instructions (violating any of these will result in significant query issues):

1. String Matching and Text Requirements:
   - For text searches: Always use LIKE with wildcards (e.g., name LIKE '%value%')
   - For employee names: Check both name and alias columns, and consider both Chinese and English variations in searches (e.g., `name LIKE '%value%' OR alias LIKE '%value%' OR name LIKE '%english/chinese_equivalent%'`)
   - For departments: Check both department and subdepartment and use LIKE with wildcards (e.g., `department LIKE '%value%' OR subdepartment LIKE '%value%'`)
   - For project/team names: ALWAYS check both project.name AND team.name when searching project-related information (e.g., `project.name LIKE '%value%' OR team.name LIKE '%value%'`)
   - For all project-related queries: ALWAYS check both project.uuid AND EXISTS (SELECT 1 FROM team WHERE team.uuid = project.team_id AND team.name LIKE '%value%')
   - NEVER use exact string matches (=) for text fields unless specified in hints
   - Handle potential NULL values in text fields

2. Join Requirements:
   - Use consistent table aliases (T1, T2, T3, etc.)
   - Use INNER JOIN when relationship must exist
   - Use LEFT JOIN for optional relationships
   - Join through proper foreign key relationships
   - Handle NULL values in join conditions
   - Ensure proper order of joins to optimize performance
   - For employee performance: outer join work_hour with projects

3. Date and Time Handling:
   - Use STRFTIME() for date standardization
   - Handle multiple date formats consistently
   - Include NULL date handling in conditions
   - Use JULIANDAY() for date differences
   - For date ranges: use BETWEEN or explicit comparisons
   - Format: STRFTIME('%Y-%m-%d', date_column)
   - Filter from start_date in work_hour unless otherwise specified
   - For "last week" queries: Calculate based on most recent completed Monday-to-Sunday period

4. Aggregation Rules:
   - Handle NULL values before aggregation
   - Group by appropriate level (team, department, client)
   - Use HAVING clause for aggregate filters
   - Include proper CASE statements for conditional counting
   - Consider data quality in calculations
   - Use appropriate window functions for complex aggregations
   - When querying subdepartments: ALWAYS group by both department AND subdepartment
   - For average work hours: 
        * First SUM all entries per employee
        * Then calculate average across employees
        * Never calculate averages directly from work_hour entries
        
5. Performance Optimization:
   - Filter early in the query
   - Use appropriate indexes
   - Minimize subqueries when possible
   - Use CTEs for complex calculations
   - Handle edge cases explicitly
   - Consider query execution plan
   - Add IS NOT NULL checks for critical calculations

6. Business Domain Rules:
   - For project calculations: Handle area and duration together
   - For team metrics: Consider cross-department collaboration
   - For client analysis: Consider background categories
   - Handle special project naming conventions
   - Consider organizational hierarchy

7. Last Week Date Handling:
   - For "last week" queries: always return most recent week Monday to Sunday Example: (2024-12-02 to 2024-12-08)
     * For SQLite: STRFTIME and date arithmetic 
   - Handle NULL dates and date comparisons appropriately
   - Include date range validation in outputs
   - Base calculations on the most recently completed Monday-to-Sunday period

8. Output Requirements:
   - Only include requested columns
   - Format numbers appropriately
   - Handle NULL values in output
   - Use clear column aliases
   - Follow sort order specifications
   - Ensure distinct results when needed

Special Scenario Handling:

1. Employee-Related Queries:
   - Always consider both Chinese and English names:
     WHERE (T1.name LIKE '%张三%' OR T1.alias LIKE '%Zhang San%'
            OR T1.name LIKE '%Zhang San%' OR T1.alias LIKE '%张三%')
   - Department hierarchy:
     WHERE (T1.department LIKE '%设计%' OR T1.subdepartment LIKE '%设计%')
   - Only include employee_id conditions when the query specifically requires personal data
   - For personal queries (my tasks, my hours): Include employee_id filters
   - For general queries (team stats, client analysis): Omit employee_id even if provided
   - Never add employee_id conditions unless explicitly needed for personal data access

2. Work Hour Calculations:
   - Valid hours calculation:
     SUM(hour) AS valid_hours
   - Efficiency metrics:
     SUM(revenue) / NULLIF(SUM(hour), 0) AS revenue_per_hour

3. Project Analysis:
   - Project status:
     CASE WHEN JULIANDAY('now') > JULIANDAY(expected_completion_date) 
          THEN 'Delayed' ELSE 'On Track' END
   - Progress calculation:
     (JULIANDAY('now') - JULIANDAY(sign_date)) / 
     NULLIF((JULIANDAY(expected_completion_date) - JULIANDAY(sign_date)), 0) * 100

4. Team Performance:
   - Cross-department collaboration:
     COUNT(DISTINCT department) AS departments_involved
   - Resource utilization:
     SUM(hour) / NULLIF(COUNT(DISTINCT working_days), 0) AS daily_utilization

5. Client Portfolio:
   - Client categorization:
     CASE WHEN background LIKE '%外资%' THEN 'Foreign'
          WHEN background LIKE '%国企%' THEN 'State-owned'
          WHEN background LIKE '%私企%' THEN 'Private'
     END AS client_type

# Labor Cost Calculator - SQLite Query Generation Rules

## Time Period Definitions
- 1 week = 7 days
- 1 month = 4.35 weeks
- 1 quarter = 13 weeks
- 1 year = 52 weeks

## Core Rules
1. Use Precise Labor Cost calculation ONLY for previous quarters
2. Use Estimated Labor Cost calculation for all other periods (current/future)

## Date Handling Rules

### Monthly Calculations:
Calculate a month by including:
- First week that ends in target month
- Next three complete weeks
- 35% of the fifth week 

For example, May 2024:
```
Week 1: April 29 - May 6    (100%)
Week 2: May 6 - May 13      (100%)
Week 3: May 13 - May 20     (100%)
Week 4: May 20 - May 27     (100%)
Week 5: May 27 - June 3     (35%)
Total = 4.35 weeks
```

### Quarterly Calculations:
Include:
- First week that ends in target quarter
- Next 12 complete weeks
Total = 13 weeks

## Calculation Methods

### Precise Labor Cost (Previous Quarters Only)
1. Calculate individual employee's total hours for the quarter
2. Calculate their hourly rate using: monthly_salary / (quarterly_hours / 3)
3. Multiple hourly rate by total hours worked
4. Sum all employees' costs

### Estimated Labor Cost (Current/Future Periods)
1. Calculate average monthly salary across all employees on project
2. Calculate average hours worked per employee
3. Calculate estimated hourly rate: avg_monthly_salary / avg_hours
4. Multiple by total hours worked
5. Adjust for period:
   - Weekly: Use avg_monthly_salary / 4.35
   - Monthly: Use avg_monthly_salary as is
   - Quarterly: Use avg_monthly_salary * 3
   - Yearly: Use avg_monthly_salary * 12

## Example Queries

### Example 1: Project Total Labor Cost
Question: "What have been the labor costs for the BMW 4S Store Design Project 2024 since its start?"

Rules to apply:
- Split calculation between completed quarters (precise) and current quarter (estimated)
- Join work_hour with employee for salary data
- Filter by specific project using project.name
- Use strftime for quarter determination

```sql
WITH project_quarters AS (
  SELECT DISTINCT
    strftime('%Y-%m', start_date) as year_month,
    strftime('%Y-Q%d', start_date) as quarter
  FROM work_hour w
  WHERE project_id = (
    SELECT uuid 
    FROM project 
    WHERE name = '2024年宝马4S店设计项目（全国）'
  )
  GROUP BY strftime('%Y-%m', start_date)
),
precise_quarters AS (
  -- Previous quarters use precise calculation
  SELECT 
    w.employee_id,
    SUM(w.hour) as total_hours,
    e.salary,
    (e.salary / (SUM(w.hour) / 3)) * SUM(w.hour) as labor_cost
  FROM work_hour w
  JOIN employee e ON w.employee_id = e.uuid
  WHERE w.project_id = (SELECT uuid FROM project WHERE name = '2024年宝马4S店设计项目（全国）')
  AND strftime('%Y-Q%d', w.start_date) < strftime('%Y-Q%d', 'now')
  GROUP BY w.employee_id
),
current_quarter AS (
  -- Current quarter uses estimated calculation
  SELECT 
    AVG(e.salary) / (SUM(w.hour) / COUNT(DISTINCT w.employee_id)) 
    * SUM(w.hour) as estimated_cost
  FROM work_hour w
  JOIN employee e ON w.employee_id = e.uuid
  WHERE w.project_id = (SELECT uuid FROM project WHERE name = '2024年宝马4S店设计项目（全国）')
  AND strftime('%Y-Q%d', w.start_date) = strftime('%Y-Q%d', 'now')
)
SELECT 
  COALESCE(SUM(labor_cost), 0) + COALESCE((SELECT estimated_cost FROM current_quarter), 0) 
  as total_project_cost
FROM precise_quarters;
```

### Example 2: Monthly Department Cost
Question: "What was the total labor cost for the AI team in May 2024?"

Rules to apply:
- Use 4.35 week calculation
- Filter by subdepartment = 'AI团队'
- Include partial fifth week
- Use estimated calculation (current/future period)

```sql
WITH may_weeks AS (
  SELECT 
    MIN(start_date) as first_week_start,
    DATE(MIN(start_date), '+28 days') as four_weeks_end,
    DATE(MIN(start_date), '+35 days') as fifth_week_end
  FROM work_hour
  WHERE end_date <= '2024-05-01'
  AND end_date >= DATE('2024-05-01', '-7 days')
),
monthly_hours AS (
  -- Full weeks
  SELECT 
    w.employee_id,
    SUM(w.hour) as full_weeks_hours
  FROM work_hour w
  JOIN employee e ON w.employee_id = e.uuid
  WHERE w.start_date >= (SELECT first_week_start FROM may_weeks)
  AND w.end_date <= (SELECT four_weeks_end FROM may_weeks)
  AND e.subdepartment = 'AI团队'
  GROUP BY w.employee_id
  
  UNION ALL
  
  -- 35% of fifth week
  SELECT 
    w.employee_id,
    SUM(w.hour) * 0.35 as partial_week_hours
  FROM work_hour w
  JOIN employee e ON w.employee_id = e.uuid
  WHERE w.start_date > (SELECT four_weeks_end FROM may_weeks)
  AND w.end_date <= (SELECT fifth_week_end FROM may_weeks)
  AND e.subdepartment = 'AI团队'
  GROUP BY w.employee_id
)
SELECT 
  AVG(e.salary) / (SUM(mh.full_weeks_hours) / COUNT(DISTINCT mh.employee_id))
  * SUM(mh.full_weeks_hours) as estimated_monthly_cost
FROM monthly_hours mh
JOIN employee e ON mh.employee_id = e.uuid;
```

### Example 3: Team Weekly Cost
Question: "What was Team GS111's labor cost for May 6-12, 2024?"

Rules to apply:
- Use estimated cost (current/future period)
- Divide monthly salary by 4.35 for weekly calculation
- Join through team -> project -> work_hour tables
- Filter by team name

```sql
SELECT 
  t.name as team_name,
  COUNT(DISTINCT w.employee_id) as team_size,
  SUM(w.hour) as total_hours,
  (AVG(e.salary) / 4.35) / (SUM(w.hour) / COUNT(DISTINCT w.employee_id))
  * SUM(w.hour) as weekly_labor_cost
FROM team t
JOIN project p ON t.uuid = p.team_id
JOIN work_hour w ON p.uuid = w.project_id
JOIN employee e ON w.employee_id = e.uuid
WHERE t.name = 'GS111'
AND w.start_date >= '2024-05-06'
AND w.end_date <= '2024-05-12'
GROUP BY t.name;
```



## Important Notes

1. Always use SQLite date functions (strftime) for date calculations
2. Handle NULL values with COALESCE
3. Use proper table joins based on the schema:
   - project.team_id -> team.uuid
   - work_hour.project_id -> project.uuid
   - work_hour.employee_id -> employee.uuid
4. Round financial calculations to 2 decimal places using ROUND()
5. Group results appropriately based on the query context (by team, department, project, etc.)
6. Filter out reversed entries using `is_reversed = 0` when needed


Query Structure Best Practices:

1. Basic Structure:
   WITH base_metrics AS (
       -- Base calculations
   ),
   derived_metrics AS (
       -- Complex calculations using base metrics
   )
   SELECT 
       -- Final output columns
   FROM base_metrics
   JOIN derived_metrics
   WHERE <conditions>
   GROUP BY <grouping>
   HAVING <aggregate conditions>
   ORDER BY <sorting>

2. Common Table Expressions (CTE) Usage:
   - Use for complex calculations
   - Improve query readability
   - Enable query optimization
   - Break down complex logic
   - Reuse intermediate results

3. Window Functions:
   - For running totals:
     SUM(value) OVER (PARTITION BY entity ORDER BY date)
   - For rankings:
     RANK() OVER (PARTITION BY group ORDER BY metric DESC)

4. Error Prevention:
   - NULL handling:
     COALESCE(value, 0)
     NULLIF(denominator, 0)
   - Date validation:
     WHERE date_column IS NOT NULL
     AND date_column <= CURRENT_DATE







Now is the real question, following the instruction and examples, generate the SQL with Recursive Divide-and-Conquer approach. Make sure you only output one single query.
**************************
【Table creation statements】
<database_schema>
Database Schema and Description

This document describes the schema of a database, including tables, columns, data types, constraints, sample values, and relationships.

1. client Table

Description: Stores information about clients, including their name, source, company, contact details, background, and any additional notes.

Columns:

uuid (char(36), Primary Key, NOT NULL): Unique identifier for each client.

Sample Values: "017143b5-285c-4a62-8ab0-bee690e6ac69", "0450995e-c275-4d2e-99c0-40e6803d2bc4", "0a8f3c0e-616a-444a-902c-23474c91124d", ...

name (varchar(255), NOT NULL): The name or title of the client.

Sample Values: "希小姐", "刘娟", "熊倩", "杨总", "冉总", "程竹", "焦总", "黄蕾", "李总", "辛总工"

source (varchar(255), NULL): The source or classification of the client relationship.

Sample Values: "老客户", "新客户", "满/小雨", "任丽娜", "王厚毅", "老洪芳"

company (varchar(255), NULL): The name of the company or organization the client is associated with.

Sample Values: "港大思培（北京）咨询有限公司", "北京东来顺集团有限责任公司", "Beijing Mercedes-Benz Sales Service Co., Ltd", null, "某传媒公司", "华晨宝马", "中证投资", "莱坊房地产经纪（上海）有限公司", "七彩云南", "燕京理工学院"

contact (varchar(255), NULL): Contact information, such as a phone number.

Sample Values: "85185526-8006", "18601133126", "8417 3546", "18611059685", "13301395893", "18610143352", null, "13701039900", "18810682639"

background (text, NULL): The background or type of the client’s organization.

Sample Values: "外资", "国企", "世界五百强", "私企", "传媒公司", "上市公司", null, "全球性房地产咨询公司", "民办学校"

description (text, NULL): Additional notes or details about the client relationship.

Sample Values: "老客户", "老客户二次经营", null, "新拓客户", "老客户公司其他业务板块二次经营", "新客户开发", "//"

2. employee Table

Description: Stores information about employees, including their name, department, alias, position, subdepartment, and salary.

Columns:

uuid (char(36), Primary Key, NOT NULL): Unique identifier for each employee.

Sample Values: "0ac49b75-a8b3-11ef-b88d-30c9abb7563e", "6d642ac1-a6f0-11ef-b88d-30c9abb7563e", "6d646397-a6f0-11ef-b88d-30c9abb7563e", ...

name (varchar(255), NOT NULL): Employee's name.

Sample Values: "杨舒然", "尹晓娟", "刘志娟", "檀雅莉", "GIBB ERIC PETER", "张海霞", "YU BILL BAICHUAN", "Kydyraliev Temirlan", "任丽娜", "高强"

department (varchar(255), NULL): The department the employee belongs to.

Sample Values: "战略内审中心", "财务管理中心", "人力资源中心", "业务拓展部"

alias (varchar(255), NULL): Employee's alias or alternative name.

Sample Values: "Shuran", "Fiona.Yin", "Kelly", "yali", "ERIC", "", "于百川", "黎萤、Tima", "Lina Ren"

position (text, NULL): The employee's job title or position.

Sample Values: "Financial Engineer", "出纳", "HRBP", "员工关系", "战略总监", "内审专员", "AI Engineer", "客户总监", "客户经理"

subdepartment (varchar(255), NULL): Subdivision within the department (if applicable).

Sample Values: "内审组", "", "AI团队"

salary (int, NULL, Default: 20000): Salary amount of each employee.

Sample Values: 20000


3. project Table

Description: Stores information about projects, including their name, team, address, type, area, sign date, expected completion date, revenue, revenue note, and client.

Columns:

uuid (char(36), Primary Key, NOT NULL): Unique identifier for each project.

Sample Values: "50bf4327-a8a8-11ef-b88d-30c9abb7563e", "50c3cd26-a8a8-11ef-b88d-30c9abb7563e", "50c581d9-a8a8-11ef-b88d-30c9abb7563e", ...

name (varchar(255), NOT NULL): The name or title of the project.

Sample Values: "宝马汽车2024-2026年年框设计项目", "上海联江芯亚芯科技园2号楼7楼局部装修施工项目", "2024年宝马4S店设计项目（全国）", "邢台经济开发区信息科技智慧应用产业园区项目餐厅精装修项目", "中信金属-BJ-办公室设计项目", "宝马品牌学院-BJ-设计施工项目", "歌尔科技产业项目二期-E栋实验室设计项目", "北京嘉华学院软装设计项目", "信达公寓设计项目", "俄罗斯天然气北京办公室改造项目"

team_id (char(36), NULL, Foreign Key referencing team.uuid): Foreign key referencing the team responsible for the project.

Sample Values: "43379251-a865-11ef-b88d-30c9abb7563e", "4338dcbc-a865-11ef-b88d-30c9abb7563e", "4339611a-a865-11ef-b88d-30c9abb7563e", "4339efab-a865-11ef-b88d-30c9abb7563e", "433a61c4-a865-11ef-b88d-30c9abb7563e", "433ac6e9-a865-11ef-b88d-30c9abb7563e", "433b1d02-a865-11ef-b88d-30c9abb7563e", "433cacbc-a865-11ef-b88d-30c9abb7563e", "433ddb1f-a865-11ef-b88d-30c9abb7563e", "433e3e07-a865-11ef-b88d-30c9abb7563e"

address (text, NULL): The location or address where the project is being executed.

Sample Values: "全国", "上海", "北京", "邢台经济开发区信息科技智慧应用产业园区", "京城大厦", "京顺东街新锦路宝马北京培训中心", "青岛市崂山区松岭路500号", "北京市宋庄镇邢各庄村", "东外39号院信达公寓"

type (varchar(100), NULL): The category of the project.

Sample Values: null, "邀请招标", "投标", "直委", "议价"

area (float, NULL): The total area of the project site.

Sample Values: 0.0, 200.0, 450.0

sign_date (date, NULL): The date when the project was signed or initiated.

Sample Values: null

expected_completion_date (date, NULL): The projected completion date for the project.

Sample Values: null

revenue (decimal(15,2), NULL): The total expected revenue from the project.

Sample Values: 0.0, 3230000.0, 275000.0, 6800000.0, 800000.0, 1000000.0, 855600.0, 220000.0, 250000.0, 2300000.0

revenue_note (text, NULL): Additional notes or remarks regarding the project revenue.

Sample Values: null

client_id (char(36), NULL, Foreign Key referencing client.uuid): Foreign key referencing the client associated with the project.

Sample Values: "0e3cf311-4f30-4d04-b69a-bdb51e7cb88c", "5449261e-bb9f-4b61-a161-5020d92b8f69", "18e49836-cc4b-40ba-81a2-adebf4c7fa0d", "3a6c0272-0f17-47e1-b1da-38990839fcb0", "48ae8adb-c80e-4748-8c48-587ad42bf636", "1a317c2d-8236-49e8-9f58-94e887d8ef04", "ffd587cb-f182-4d66-9424-3fb3c16f8586", "34b61e09-0b33-474d-8f80-45c4201cdded", "3a92a419-e5b5-4384-a8cf-3a36ba76f1f1", "c3ae833a-c5db-427d-8ac9-0f40726372c6"


4. team Table

Description: Stores information about teams, including their name and description.

Columns:

uuid (char(36), Primary Key, NOT NULL): Unique identifier for each team.

Sample Values: "4325f609-a865-11ef-b88d-30c9abb7563e", "43266720-a865-11ef-b88d-30c9abb7563e", "4326d8e8-a865-11ef-b88d-30c9abb7563e", ...

name (varchar(255), NULL): The name or code of the team.

Sample Values: "CANAAN24004-BJ08", "CANAAN24005-BJ08", "GS111", "GS19037-BJ04", "GS19121-CQ10", "GS19132-BJ10", "GS210031-BJ03", "GS210069-SD06", "GS210071-BJ07", "GS210075-SH07"

description (text, NULL): A description providing additional details about the team.

Sample Values: null

5. team_assignment Table

Description: Links employees to teams, indicating which employees are assigned to which teams.

Columns:

uuid (char(36), Primary Key, NOT NULL): Unique identifier for each team assignment.

Sample Values: "47da5110-b519-11ef-816a-30c9abb7563e", "48d106b2-b519-11ef-816a-30c9abb7563e", "49d44a7b-b519-11ef-816a-30c9abb7563e", ...

team_id (char(36), NULL, Foreign Key referencing team.uuid): Foreign key referencing the team.

Sample Values: "4325f609-a865-11ef-b88d-30c9abb7563e", "43266720-a865-11ef-b88d-30c9abb7563e", "4326d8e8-a865-11ef-b88d-30c9abb7563e"

employee_id (char(36), NULL, Foreign Key referencing employee.uuid): Foreign key referencing the employee.

Sample Values: "6d6a68a0-a6f0-11ef-b88d-30c9abb7563e", "6d652b20-a6f0-11ef-b88d-30c9abb7563e", null, "6d658fa2-a6f0-11ef-b88d-30c9abb7563e", "6d665e30-a6f0-11ef-b88d-30c9abb7563e", "6d6690e2-a6f0-11ef-b88d-30c9abb7563e", "6d6727f3-a6f0-11ef-b88d-30c9abb7563e", "6d675a5a-a6f0-11ef-b88d-30c9abb7563e", "6d677378-a6f0-11ef-b88d-30c9abb7563e"


6. work_hour Table

Description: Stores work hour entries, including task descriptions, project stage, standardization status, project ID, employee ID, hours worked, and start/end dates.

Columns:

uuid (char(36), Primary Key, NOT NULL): Unique identifier for each work hour entry.

Sample Values: "00240cd1-b88f-4b46-b39e-999da52d5db5", "0032f417-956b-4687-9a0e-2265a21a084d", "003faf2f-a617-483d-a60b-0b74860226f9", ...

is_reversed (tinyint(1), NULL, Default: 0): Indicates if the work is reworked (0: Not reversed, 1: Reversed).

Sample Values: 0

task_description (text, NULL): Description of the task associated with the work hour entry.

Sample Values: "合同流程中，指定消防（三方协议）", "甲方汇报会,时间计划梳理,燃气对接", "华控咨询UPS事宜。华控售后。华控播控失灵问题与厂家沟通，寻求解决方案。", "", "平面方案,需求对接", "现场反馈，暖通施工图纸调整", "二层剧场图纸深化、现场勘察及租户图纸审核及沟通", "接待室、汇报厅施工图绘制", "甲方审图意见沟通及调整", "算量及整理清单组价报价（8.5+7.5+8）小时"

stage (text, NULL): Represents the stage of the project when the employee is working on it.

Sample Values: "2. 设计阶段", "5. 售后阶段", null, "3. 施工阶段"

is_standardized (tinyint(1), NULL, Default: 1): Indicates if the work hour entry is standardized according to predefined metrics (0: Not standardized, 1: Standardized).

Sample Values: 1

project_id (char(36), NULL, Foreign Key referencing project.uuid): Foreign key referencing the project.

Sample Values: "50efeaed-a8a8-11ef-b88d-30c9abb7563e", "50df625a-a8a8-11ef-b88d-30c9abb7563e", "f27659ca-b454-11ef-81ce-30c9abb7563e", null, "50e9c62d-a8a8-11ef-b88d-30c9abb7563e", "f314c780-b454-11ef-81ce-30c9abb7563e", "f28dc51c-b454-11ef-81ce-30c9abb7563e", "f29142ef-b454-11ef-81ce-30c9abb7563e", "f318a5bb-b454-11ef-81ce-30c9abb7563e", "f1f27d5f-b454-11ef-81ce-30c9abb7563e"

employee_id (char(36), NULL, Foreign Key referencing employee.uuid): Foreign key referencing the employee who logged the hours.

Sample Values: "6d6ac420-a6f0-11ef-b88d-30c9abb7563e", null, "6d660ff0-a6f0-11ef-b88d-30c9abb7563e", "6d678c74-a6f0-11ef-b88d-30c9abb7563e", "6d683bd4-a6f0-11ef-b88d-30c9abb7563e", "6d6887cc-a6f0-11ef-b88d-30c9abb7563e", "6d6727f3-a6f0-11ef-b88d-30c9abb7563e", "6d6a7d14-a6f0-11ef-b88d-30c9abb7563e"

hour (decimal(10,2), NULL): The number of hours worked.

Sample Values: 1.0, 19.0, 1.5, 16.0, 13.0, 1.0, 9.0, 19.75, 3.0, 24.0

start_date (date, NULL): The start date of each work hour log.

Sample Values: "2024-09-09", "2024-07-29", "2024-09-16", "2024-09-23", "2024-08-26"

end_date (date, NULL): The end date of each work hour log.

Sample Values: "2024-09-15", "2024-08-04", "2024-09-22", "2024-09-29", "2024-09-01"

Relationships:

project table has a foreign key client_id referencing client.uuid.

project table has a foreign key team_id referencing team.uuid.

team_assignment table has a foreign key team_id referencing team.uuid.

team_assignment table has a foreign key employee_id referencing employee.uuid.

users table has a foreign key employee_id referencing employee.uuid.

work_hour table has a foreign key project_id referencing project.uuid.

work_hour table has a foreign key employee_id referencing employee.uuid.

Notes:

The uuid columns are used as primary keys in most tables, ensuring unique identification of records.

This document provides a comprehensive overview of the database schema, sample data, and relationships. Please let me know if you have any further questions or require additional details.
</database_schema>

**************************
【Question】
Question: 
{QUESTION}


**************************
【Answer】
Repeating the question, and generating the SQL with Recursive Divide-and-Conquer
</FINAL_ANSWER>
