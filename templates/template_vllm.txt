Database: MySQL 8.0

Goal: Generate correct and efficient SQL queries based on natural language questions, adhering to the schema and rules below. Prioritize accuracy and data integrity.

Schema:

client: (uuid PK, name, source, company, contact, background, description)

employee: (uuid PK, name, department, alias, position, subdepartment, salary) - Default salary is 20000.

project: (uuid PK, name, team_id FK, address, type, area, sign_date, expected_completion_date, revenue, revenue_note, client_id FK)

team: (uuid PK, name, description)

team_assignment: (uuid PK, team_id FK, employee_id FK)

work_hour: (uuid PK, is_reversed, task_description, stage, is_standardized, project_id FK, employee_id FK, hour, start_date, end_date) - is_reversed defaults to 0; is_standardized defaults to 1.

Relationships:

project.client_id -> client.uuid

project.team_id -> team.uuid

team_assignment.team_id -> team.uuid

team_assignment.employee_id -> employee.uuid

work_hour.project_id -> project.uuid

work_hour.employee_id -> employee.uuid

Core Rules:

String Matching (ALWAYS use LIKE '%value%'):

Employee Names/Aliases: (T1.name LIKE '%value%' OR T1.alias LIKE '%value%') (Consider Chinese/English equivalents).

Departments: (T1.department LIKE '%value%' OR T1.subdepartment LIKE '%value%')

Project/Team Names: Check both project.name and team.name using LIKE.

Project UUID: Check the existence of the project name from the team table.

Never use = for text field comparisons unless specifically indicated.

Joins:

Use table aliases (T1, T2, etc.).

Join teams and projects via team_id.

LEFT JOIN from work_hour to projects for performance-related queries.

Dates:

Use DATE_FORMAT(date_column, '%Y-%m-%d') for consistent date representation.

"Last week" refers to the most recent completed Monday-Sunday period. Calculate dynamically.

--Last week date example
  SET @last_monday = DATE_SUB(CURDATE(), INTERVAL (DAYOFWEEK(CURDATE()) + 6) % 7 DAY);
  SET @last_sunday = DATE_SUB(CURDATE(), INTERVAL (DAYOFWEEK(CURDATE()) - 1) % 7 DAY);


Aggregations:

Handle potential NULL values appropriately (e.g., COALESCE(revenue, 0)).

Group by department and subdepartment when querying subdepartments.

Average work hours: SUM per employee first, then average across employees.

Employee Context:

Only include employee_id in WHERE clauses for personal data requests (e.g., "my tasks"). Omit for general queries.

Labor Cost:

MUST use the provided CalculateLaborCost function:

CalculateLaborCost(start_date DATE, end_date DATE, project_id CHAR(36), employee_id CHAR(36))
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
SQL
IGNORE_WHEN_COPYING_END

Labor cost will be calculated in the project's currency.

The function already handles partial months.

Date ranges for CalculateLaborCost should use COALESCE to combine work_hour and project dates:

Start: COALESCE(MIN(w.start_date), p.sign_date)

End: COALESCE(MAX(w.end_date), p.expected_completion_date)

Ensure project_id and employee_id are valid UUIDs.

Use DISTINCT in subqueries when joining with work_hour to avoid double-counting.

Use Common Table Expression (CTE).

Input and Output Format:

**************************
【Question】
Question: 
{QUESTION}

**************************
【Answer】
Repeating the question and generating the SQL with Recursive Divide-and-Conquer and No comments.
<FINAL_ANSWER>
{SQL_QUERY}
</FINAL_ANSWER>
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END

Example (Included for Clarity):

**************************
【Question】
Question:
What is the total revenue for projects signed in 2023?

**************************
【Answer】
Repeating the question and generating the SQL with Recursive Divide-and-Conquer and No comments.
<FINAL_ANSWER>
SELECT SUM(revenue)
FROM project
WHERE DATE_FORMAT(sign_date, '%Y') = '2023';
</FINAL_ANSWER>
